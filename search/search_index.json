{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Sandbox","text":"<p>This is where we experiment with MkDocs features, configurations, and more.</p>"},{"location":"#github-sites","title":"Github Sites","text":"<p>These are the other github sites:</p> <ul> <li>Portal</li> <li>Python</li> <li>Sandbox</li> <li>Local</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Setup</li> <li>Plugins</li> <li>Reference</li> </ul>"},{"location":"#quick-reference","title":"Quick Reference","text":"<ul> <li>Markdown</li> </ul> <p>:smiley: :thumbsup: :tada:</p>"},{"location":"markdown/","title":"Markdown","text":""},{"location":"markdown/#markdown-quick-reference","title":"Markdown Quick Reference","text":"<p>Below is a single Markdown document that demonstrates many common Markdown features. You can copy this into a file named <code>Markdown.md</code>. Feel free to add or remove sections based on your needs!</p> <p>This document highlights the most common Markdown syntax and features. Simply copy and paste this into a <code>.md</code> file to have a quick reference.</p>"},{"location":"markdown/#1-headings","title":"1. Headings","text":"<p>Use <code>#</code> through <code>######</code> to create headings of different levels.</p> <pre><code># Heading 1\n## Heading 2\n### Heading 3\n#### Heading 4\n##### Heading 5\n###### Heading 6\n</code></pre>"},{"location":"markdown/#2-text-formatting","title":"2. Text Formatting","text":""},{"location":"markdown/#21-emphasis","title":"2.1 Emphasis","text":"<ul> <li>Italic (using asterisks) <code>markdown   *Italic*</code></li> <li> <p>Italic (using underscores) <code>markdown   _Italic_</code></p> </li> <li> <p>Bold (using double asterisks) <code>markdown   **Bold**</code></p> </li> <li> <p>Bold (using double underscores) <code>markdown   __Bold__</code></p> </li> <li> <p>Bold and Italic <code>markdown   ***Bold and Italic***</code></p> </li> <li>Bold and Italic <code>markdown   ___Bold and Italic___</code></li> </ul>"},{"location":"markdown/#22-strikethrough","title":"2.2 Strikethrough","text":"<ul> <li>~~Strikethrough~~ <code>markdown   ~~Strikethrough~~</code></li> </ul>"},{"location":"markdown/#3-paragraphs-and-line-breaks","title":"3. Paragraphs and Line Breaks","text":"<p>Simply write your text in separate lines for paragraphs:</p> <pre><code>This is the first paragraph.\n\nThis is the second paragraph.\n</code></pre> <p>To force a line break, end a line with two or more spaces:</p> <pre><code>This line ends with two spaces.  \nSo this text starts on a new line.\n</code></pre>"},{"location":"markdown/#4-blockquotes","title":"4. Blockquotes","text":"<p>Use <code>&gt;</code> to create blockquotes. They can be nested by using multiple <code>&gt;</code> characters.</p> <pre><code>&gt; This is a blockquote.\n\n&gt; &gt; Nested blockquote.\n</code></pre> <p>This is a blockquote.</p> <p>Nested blockquote.</p>"},{"location":"markdown/#5-lists","title":"5. Lists","text":""},{"location":"markdown/#51-unordered-lists","title":"5.1 Unordered Lists","text":"<p>Use <code>-</code>, <code>+</code>, or <code>*</code> followed by a space to create unordered lists.</p> <pre><code>- Item 1\n- Item 2\n  - Nested Item 2.1\n  - Nested Item 2.2\n- Item 3\n</code></pre> <ul> <li>Item 1</li> <li>Item 2</li> <li>Nested Item 2.1</li> <li>Nested Item 2.2</li> <li>Item 3</li> </ul>"},{"location":"markdown/#52-ordered-lists","title":"5.2 Ordered Lists","text":"<p>Use numbers followed by a period (<code>1.</code>, <code>2.</code>, <code>3.</code>) to create ordered lists.</p> <pre><code>1. First item\n2. Second item\n3. Third item\n   1. Sub item\n   2. Sub item\n</code></pre> <ol> <li>First item</li> <li>Second item</li> <li>Third item</li> <li>Sub item</li> <li>Sub item</li> </ol>"},{"location":"markdown/#6-horizontal-rules","title":"6. Horizontal Rules","text":"<p>Use three or more asterisks (<code>***</code>), dashes (<code>---</code>), or underscores (<code>___</code>) on their own line.</p> <pre><code>---\n***\n___\n</code></pre>"},{"location":"markdown/#7-links","title":"7. Links","text":""},{"location":"markdown/#71-inline-links","title":"7.1 Inline Links","text":"<pre><code>[This is a link](https://www.example.com)\n</code></pre> <p>This is a link</p>"},{"location":"markdown/#72-reference-links","title":"7.2 Reference Links","text":"<pre><code>[Reference-style link][example-ref]\n\n[example-ref]: https://www.example.com \"Optional Title\"\n</code></pre> <p>Reference-style link</p>"},{"location":"markdown/#8-images","title":"8. Images","text":""},{"location":"markdown/#81-inline-images","title":"8.1 Inline Images","text":"<pre><code>![Markdown Logo](https://markdown-here.com/img/icon256.png)\n</code></pre>"},{"location":"markdown/#82-reference-style-images","title":"8.2 Reference Style Images","text":"<pre><code>![Alt text][img-ref]\n\n[img-ref]: https://markdown-here.com/img/icon256.png \"Markdown Logo\"\n</code></pre>"},{"location":"markdown/#9-code","title":"9. Code","text":""},{"location":"markdown/#91-inline-code","title":"9.1 Inline Code","text":"<p>Surround inline code with backticks:</p> <pre><code>Use the `printf()` function to print to standard output.\n</code></pre> <p>Example: Use the <code>printf()</code> function to print to standard output.</p>"},{"location":"markdown/#92-code-blocks","title":"9.2 Code Blocks","text":"<p>Use triple backticks (```) with an optional language identifier for syntax highlighting:</p> Example in Markdown    ```markdown   ```python   def hello_world():       print(\"Hello, world!\")   ```   ```  <p>Which renders as:</p> <pre><code>def hello_world():\n    print(\"Hello, world!\")\n</code></pre>"},{"location":"markdown/#10-tables","title":"10. Tables","text":"<p>Use <code>|</code> to create tables. You can align columns using colons (<code>:</code>).</p> <pre><code>| Left Align | Center Align | Right Align |\n|:-----------|:------------:|------------:|\n| Item A     |   Item B     |       Item C|\n| Item D     |   Item E     |       Item F|\n</code></pre> Left Align Center Align Right Align Item A Item B Item C Item D Item E Item F"},{"location":"markdown/#11-footnotes","title":"11. Footnotes","text":"<p>Use <code>[^1]</code> syntax to add footnotes.</p> <pre><code>Here is a sentence with a footnote.[^1]\n\n[^1]: This is the footnote text.\n</code></pre> <p>Here is a sentence with a footnote.<sup>1</sup></p>"},{"location":"markdown/#12-task-lists-github-flavored-markdown","title":"12. Task Lists (GitHub Flavored Markdown)","text":"<p>You can create checklists using <code>- [ ]</code> or <code>- [x]</code>.</p> <pre><code>- [x] Completed task\n- [ ] Incomplete task\n- [ ] Another task\n</code></pre> <ul> <li>[x] Completed task  </li> <li>[ ] Incomplete task  </li> <li>[ ] Another task  </li> </ul>"},{"location":"markdown/#13-emojis-github-some-editors","title":"13. Emojis (GitHub / Some Editors)","text":"<p>You can use <code>:emoji_name:</code> to insert emojis (in some Markdown renderers like GitHub).</p> <p>For example:</p> <pre><code>:smiley: :thumbsup: :tada:\n</code></pre> <p>:smiley: :thumbsup: :tada:</p>"},{"location":"markdown/#14-html-in-markdown","title":"14. HTML in Markdown","text":"<p>You can mix HTML for more complex layouts:</p> <pre><code>&lt;p style=\"color: blue;\"&gt;This is a blue paragraph in HTML.&lt;/p&gt;\n</code></pre> <p>This is a blue paragraph in HTML.</p>"},{"location":"markdown/#15-escaping-characters","title":"15. Escaping Characters","text":"<p>Use a backslash to escape Markdown characters if needed:</p> <pre><code>\\*This text is not italicized.\\*\n</code></pre> <p>*This text is not italicized.*</p>"},{"location":"markdown/#16-collapsible-sections-github-flavored-markdown","title":"16. Collapsible Sections (GitHub Flavored Markdown)","text":"Click to expand!    This is some hidden content!   <pre><code>&lt;details&gt;\n  &lt;summary&gt;Click to expand!&lt;/summary&gt;\n\n  This is some hidden content!\n\n&lt;/details&gt;\n</code></pre>"},{"location":"markdown/#thats-it","title":"That\u2019s It!","text":"<p>This cheat sheet should cover the most commonly used Markdown syntax. Experiment, mix and match, and enjoy writing clean and visually appealing documentation!</p> <p>Feel free to modify this document in any way you see fit. Happy writing!</p> <ol> <li> <p>This is the footnote text.\u00a0\u21a9</p> </li> </ol>"},{"location":"plugins/","title":"Setup","text":"<p>Instructions on how to install and configure this MkDocs project.</p>"},{"location":"plugins/#installation","title":"Installation","text":"<ol> <li>Install Python 3.</li> <li><code>pip install mkdocs-material</code></li> <li><code>mkdocs serve</code> to start your local dev server.</li> </ol>"},{"location":"plugins/#configuration","title":"Configuration","text":"<p>Details on configuring <code>mkdocs.yml</code>, including theme, plugins, etc.</p>"},{"location":"reference/","title":"Reference","text":"<p>This section provides reference material, code snippets, or documentation  for features tested in this Sandbox project.</p>"},{"location":"reference/#examples","title":"Examples","text":"<ul> <li>Snippets for advanced markdown usage.</li> <li>Documentation for custom CSS or JS overrides.</li> </ul> <p>...</p>"},{"location":"setup/","title":"Setup","text":"<p>Instructions on how to install and configure this MkDocs project.</p>"},{"location":"setup/#installation","title":"Installation","text":"<ol> <li>Install Python 3.</li> <li><code>pip install mkdocs-material</code></li> <li><code>mkdocs serve</code> to start your local dev server.</li> </ol>"},{"location":"setup/#configuration","title":"Configuration","text":"<p>Details on configuring <code>mkdocs.yml</code>, including theme, plugins, etc.</p>"},{"location":"python/","title":"Python Quick Reference","text":""},{"location":"python/#objects","title":"Objects","text":""},{"location":"python/#dictionary","title":"Dictionary","text":"<ul> <li>Best Practice</li> </ul>"},{"location":"python/#list","title":"List","text":"<ul> <li>List Functions</li> </ul>"},{"location":"python/dictionary/","title":"Dictionary Best Practice","text":""},{"location":"python/dictionary/#mistake-1-wrong-way-to-check-if-a-key-exists","title":"Mistake #1: Wrong way to check if a key exists","text":"<p>Sometimes people do this to check if the key exists or not:</p> <pre><code>my_dict = {\"name\": \"Kiran\", \"age\": 24}\nif \"name\" in my_dict:\n    print(my_dict[\"name\"])\nelse:\n    print(\"No name found\")\n</code></pre> <p>A better way to do this:</p> <pre><code>my_dict = {\"name\": \"Kiran\", \"age\": 24}\nprint(my_dict.get(\"name\", \"No name found\"))\n</code></pre> <p>This method makes the code cleaner by removing the extra if-else checks.</p>"},{"location":"python/dictionary/#mistake-2-incorrect-looping-over-both-keys-and-values","title":"Mistake #2: Incorrect looping over both keys and values","text":"<p>Many people loop like this:</p> <pre><code>my_dict = {\"a\": 1, \"b\": 2, \"c\": 3}\nfor key in my_dict:\n    print(key, my_dict[key])  \n</code></pre> <p>A better approach:</p> <pre><code>for key, value in my_dict.items():\n    print(key, value)\n</code></pre> <p>This makes the code more readable and efficient.</p>"},{"location":"python/dictionary/#mistake-3-incorrect-way-of-merging-dictionaries","title":"Mistake #3: Incorrect way of merging dictionaries","text":"<p>Some beginners merge dictionaries like this:</p> <pre><code>dict1 = {\"a\": 1, \"b\": 2}\ndict2 = {\"b\": 3, \"c\": 4}\ndict1.update(dict2)\nprint(dict1)\n</code></pre> <p>This modifies <code>dict1</code> in place. Instead, use dictionary unpacking:</p> <pre><code>dict1 = {\"a\": 1, \"b\": 2}\ndict2 = {\"b\": 3, \"c\": 4}\nnew_dict = {**dict1, **dict2}\nprint(new_dict)  # {'a': 1, 'b': 3, 'c': 4}\n</code></pre> <p>This creates a new dictionary, avoiding accidental modifications.</p>"},{"location":"python/dictionary/#mistake-4-overusing-defaultdict","title":"Mistake #4: Overusing <code>defaultdict</code>","text":"<p>Example of unnecessary <code>defaultdict</code> usage:</p> <pre><code>from collections import defaultdict\nmy_dict = defaultdict(int)\nmy_dict[\"a\"] += 1  # Works, but is it needed?\n</code></pre> <p>A simpler approach:</p> <pre><code>my_dict = {}\nmy_dict[\"a\"] = my_dict.get(\"a\", 0) + 1\n</code></pre> <p>This avoids unnecessary imports and keeps the code simple.</p>"},{"location":"python/dictionary/#mistake-5-ignoring-dictionary-performance","title":"Mistake #5: Ignoring dictionary performance","text":"<p>When dealing with large dictionaries:</p> <pre><code>my_dict = {i: i**2 for i in range(10_000_000)}  \n</code></pre> <p>This consumes a lot of memory. Instead, use a generator:</p> <pre><code>def squared_numbers():\n    for i in range(10_000_000):\n        yield i, i**2\n\nmy_dict = dict(squared_numbers())\n</code></pre> <p>This approach reduces memory usage.</p>"},{"location":"python/dictionary/#mistake-6-misusing-setdefault","title":"Mistake #6: Misusing <code>setdefault()</code>","text":"<p>Beginners often do this:</p> <pre><code>data = {}\nif \"name\" not in data:\n    data[\"name\"] = \"kiran\"\n</code></pre> <p>A better way:</p> <pre><code>data = {}\ndata.setdefault(\"name\", \"kiran\")\n</code></pre> <p>However, using <code>setdefault()</code> incorrectly can waste time:</p> <pre><code>name = data.setdefault(\"name\", some_expensive_function())\n</code></pre> <p>Even if \"name\" is present, <code>some_expensive_function()</code> is still executed. Instead, use:</p> <pre><code>name = data.get(\"name\", \"kiran\")\n</code></pre>"},{"location":"python/dictionary/#mistake-7-not-using-counter-for-counting","title":"Mistake #7: Not using <code>Counter</code> for counting","text":"<p>Many beginners count items manually:</p> <pre><code>words = [\"apple\", \"banana\", \"apple\"]\nword_count = {}\nfor word in words:\n    word_count[word] = word_count.get(word, 0) + 1\n</code></pre> <p>A better approach using <code>Counter</code>:</p> <pre><code>from collections import Counter\nword_count = Counter(words)\n</code></pre> <p>This makes the code cleaner and more efficient.</p> <p>By following these best practices, your Python dictionary usage will become more efficient and readable!</p>"},{"location":"python/list/","title":"Python List Functions","text":""},{"location":"python/list/#map","title":"map()","text":"<p>numbers = [1, 2, 3, 4] doubled = list(map(lambda x: x * 2, numbers)) print(doubled)  # [2, 4, 6, 8]</p>"}]}